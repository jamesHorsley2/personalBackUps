Lesson 2 Assembly tldr

Arithmetic and Logical Operators

This is lesson is about playing with data, more than memory address's

8-bit Arithmeic and Logical Instructions
ADD A, R
ADD A, n
ADD A, (HL)

This is the very simple ADD instruction. It basically adds the contents of register A with the second operand places the result in A. The second operand can be either an 8-bit register r, or a single byte of immediate data n, or a byte iun memory addressed by the register pair HL.

Flags affected are (note The F register is the register that handles this)

	Z: set according to result	(Zero Flag)
	C: set according to result	(Carry Flag)
	N: reset (0)					(Subtraction Flag)
	H: set according to result	(Half Carry Flag)

		ADC A, r
		ADC A, n
		ADC A, (HL)

		ADC is the Add Carry instruction. it acts excatly like a stamdard ADD, including operands, except that is adds the contents of the single-bit Carry flag to the result. Helpfull for adding things with large numbers

		Z: set according to result	
		C: set according to result
		N: reset (0)				
		H: set according to result

	SUB r
	SUB n
	SUB (HL)

	SUB is the subtraction instruction that subtracts the operand from the register A and leaves the result in A. Same types of operands as the ADD instruction.

	Notice how the instruction does not have a destination specified, this is because it is implied that the destination is always A.

	Z: set according to result	
	C: set according to result
	N: set (1)				
	H: set according to result

		SBC A,r
		SBC A,n
		SBC A,(HL)

		SBC is the SUB instruction with Carry. it subtracts the Carry flag from the result

		Z: set according to result	
		C: set according to result
		N: set (1)				
		H: set according to result

	AND r
	AND n
	AND (HL)

	This Instruction LOGICALLY AND's, each bit of both register A and the operand together and leaves the result in A.

	So from what i understand is that it adds both register A, and the operands bits together, and leaves the result in register A

	Notice how the instruction does not have a destination specified, this is because it is implied that the destination is always A.
	
	Z: set according to result	
	C: reset (0)
	N: reset (0)				
	H: set (1)

		OR r
		OR n
		OR (HL)

		This instruction is LOGICALLY OR's each bit of both register A and the operand together and leaves the result in A

		Z: set according to result	
		C: reset (0)
		N: reset (0)				
		H: reset (0)

	XOR r
	XOR n
	XOR (HL)
	This intruction LOGICALLY XOR's each bit of both register A and the operand together and leaves the result in A

	For example "A XOR B, would be translated to 'are A and B not equal' so XOR ax,ax will set ax to zero since ax is always equal to its self, if it was not equal, ax would be set to One"

	Z: set according to result	
	C: reset (0)
	N: reset (0)				
	H: reset (0)

		CP r
		CP n
		CP (HL)

		CP is the ComPares instruction, the instruction ComPares the operand with the contents of the accumulator by subtracting the operand from the acumulator. This instruction differs from the SUB insutruction in that the contents of A aren't changed, only the flags

		Z: set according to result	
		C: set according to result
		N: set (1)				
		H: set according to result

	INC r
	INC (HL)

	The INC instruction INCrements (adds) the operand (an 8-bit register) by one. in the case of INC (HL), the 8-bit data value at the memory location contained in register pair HL is incremented by 1;

	Z: set according to result	
	C: not affected
	N: reset (0)				
	H: set according to result

		DEC r
		DEC (HL)

		The DEC instruction DECrements the operand by one. in the case of DEC(HL), the 8-bit value at the memory location contained in register pair HL is decremented by 1
		
		Z: set according to result	
		C: not affected
		N: reset (0)				
		H: set according to result	

16-bit Arithmetic Instructions

	ADD HL, rr
	This instruction adds the contents of register pair rr to register pair HL. rr can be any of pr, BC, DE, HL, or SP.

		INC rr
		This instruction increments the contens of register pair rr by one.rr can be any of pr, BC, DE, HL, or SP.

	DEC rr
	This instruction decrements the contents of register pair rr by one. rr can be any of pr, BC, DE, HL, or SP.

	There is not use for 16 bit numbers since the GameBoy's CPU is 8-bit, and can handle 8-bit numbers more effiently

Rotate and Shift Operations

	RLCA
	ROtate Left Circular Accumulator. this instruction rotates A left one bit, placing bit 7 at bit 0 AND in the Carry Flag
	RLCA

	Z: not affected
	C: set according to result
	N: reset (0)
	H: reset (0)

		RLC r or (HL)
		Rotate Left Circular. this instruction rotates either register r of the byte located at the address in HL left one bit, placing bit 7 at bit 0 AND in the Carry Flag

		RLC r or (HL)

		Z: set according to result
		C: set according to result
		N: reset (0)
		H: reset (0)

	RLA
	Rotate Left Accumulator. This Instruction rotates A left one bit placing bit 7 into the Carry flag and the contents of the Carry flag into bit 0 of A
	RLA

	Z: not affected
	C: set according to result
	N: reset (0)
	H: reset (0)

		RL r or (HL)
		Rotate Left. THis instruction rotates either register r or the byte located at the address in HL left one bit, placing bit 7 into the Carry flag and the contents of the Carry flag into bit 0 of A
		RL r or (HL)

		Z: set according to result
		C: set according to result
		N: reset (0)
		H: reset (0)

	RRCA
	Rotate Right Cicular Accumulator. this instruction rotates A right on bit, placing bit 0 at bit 7 AND in the Carry flag
	RRCA

	Z: not affect
	C: set according to result
	N: reset (0)
	H: reset (0)

		RRC r or (HL)
		Rotate Right Circular. This instruction rotates either register r of the byte located at the address in HL right one bit, placing bit 0 at bit 7 AND in the Carry flag.
		RRC r or (HL)

		Z: set according to result
		C: set according to result
		N: reset (0)
		H: reset (0)

	RRA
	Rotate Right Accumulator. this instruction rotates A right one bit, placing bit 0 into the Carry flag and the contents of the Carry flag into bit 7 of A
	RRa
	Z: not affected
	C: set according to result
	N: reset (0)
	H: reset (0)

		RR r or (HL)
		Rotate Right. This instruction rotates either register r or the byte located at the address in HL right one bit, placing bit 0 into the Carry flag and the contents of the Carry flag into bit 7 of A.

		RR r or (HL)

		Z: set according to result
		C: set according to result
		N: reset (0)
		H: reset (0)

	SLA r or (HL)
	Shift Left Arithmetically. THis instruction shifts either register r or the bute located at the address in HL left ont bit, placing 0 into bit 0, and placing bit 7 into the Carry flag
	SLA r or (HL)

	Z: set according to result
	C: set according to result
	N: reset (0)
	H: reset (0)

		SRA r or (HL)
		SHift Right Arithmetically/ this instruction shifts either register r or the byte located at the address in HL right on bit, placing bit 0 into the Carry flag, and leaving bit 7 untouched
		SRA r or (HL)

		Z: set according to result
		C: set according to result
		N: reset (0)
		H: reset (0)

	SRL r or (HL)
	Shift Right Logically. this instruction shifts either register r or the bute located at the address in HL right one bit, placing 0 into bit 7, and placing bit 0 into the carry flag.

	SRL r or (HL)

	Z: set according to result
	C: set according to result
	N: reset (0)
	H: reset (0)

Bit Manupulation

	BIT b, r
	BIT b, (HL)

	BIT basically puts the bit from either the value located at HL or r, and copies it into the Z flag and, 'AND INVERTED' inverts the current bit in the Z flag, this is because a z flag can only be set when a result is Zero.

	Z: set according to result
	C: no effect
	N: reset (0)
	H: set (1)

		SET b, r
		SET b, (HL)
		Sets (1) bit b in register r or the byte addressed in HL
		no flags are affected.



















